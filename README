Branch version based on DS-CUDA version 1.4.2. I added some functions for Fault Tolerant.

[Abstract]

[Status]
	under development.

[Memo]
	(1) virtual device managemant in the dscuda client library.
	    Vdet_t Vdev[RC_NVDEVMAX] "RC_NVDEVMAX"=64 by default.
	    int    Nvdev;

	    From the side of the dscuda server(s), the server can't distinguish
	    grouping of redundant construction.
	    
	(2) fault injection mechanism
	DSCUDA server recognize the parameters by following 4 types in
	function "rpcUnpackKernelParam()", 
	- dscudaArgTypeP: pointer(any type).
	- dscudaArgTypeI: int.
	- dscudaArgTypeF: float.
	- dscudaARgTypeV: (else) struct, double, 'FaultConf_t', ..

	(3) Frequently Wrong Operation
	    - (+_+)set environment variable "LD_LIBRARY_PATH" on server node.

	(4) What's UVA in dscuda's source code mean?
	    DSCUDA global address spaceing is called "UVA"(Univasal Virtual Address).
	    The UVA has 64bit width and consists of 2 elements, each GPU address
	    and its device number.
	    Upper 16bit of UVA is equal to device number, and
	    Lower 48bit of UVA is equal to each GPU address space.
	    I define new variable type for UVA as "DscudaUva_t" instead of original
	    "unsigned long".
	    *CAUTION* Therefore, 32bit OS is not allowed to use UVA.

	       [UVA APIs]
	       /* to UVA */
	       void* dscudaUvaOfAdr(void *adr, int devid);
	       /* from UVA */ 
               void *dscudaAdrOfUva(void *adr);			
	       int dscudaDevidOfUva(void *adr);
	    
[History]

[etc]
	日本語テスト for gitHub.